generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id         Int     @id @default(autoincrement())
  cep        String  @db.Char(11)
  address    String
  complement String
  number     String
  city_id    Int
  cities     cities  @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users[]
}

model admin {
  id       Int     @id @default(autoincrement())
  username String
  password String
  token    String
  active   Boolean @default(false)
}

model brands {
  id    Int      @id @default(autoincrement())
  name  String   @unique(map: "uniqe")
  valid Boolean? @default(false)
  carts carts[]
}

model cart_model {
  id    Int      @id @default(autoincrement())
  name  String   @unique(map: "uniquen")
  valid Boolean? @default(false)
  carts carts[]
}

model cart_type {
  id    Int      @id @default(autoincrement())
  name  String   @unique(map: "uniquene")
  valid Boolean? @default(false)
  carts carts[]
}

model carts {
  id          Int           @id @default(autoincrement())
  main_image  String
  size        Int
  color       String
  valid       Boolean       @default(false)
  brand_id    Int
  type_id     Int
  model_id    Int
  wheel_id    Int
  user_id     Int
  description String        @default("Sem observações")
  title       String
  price       Int
  sections    Int
  status      String
  year        Int
  cart_images cart_images[]
  brands      brands        @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_model  cart_model    @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_type   cart_type     @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wheel       wheel         @relation(fields: [wheel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model cities {
  id       Int       @id @default(autoincrement())
  name     String
  state_id Int
  address  address[]
  states   states    @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sessions {
  id      Int     @id @default(autoincrement())
  token   String
  active  Boolean @default(false)
  user_id Int
  users   users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model states {
  id     Int      @id @default(autoincrement())
  name   String   @unique(map: "uniqueness")
  cities cities[]
}

model users {
  id         Int        @id @default(autoincrement())
  cpf        String     @unique @db.Char(11)
  name       String
  email      String     @unique
  password   String
  phone      String     @db.Char(11)
  address_id Int
  carts      carts[]
  sessions   sessions[]
  address    address    @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wheel {
  id    Int      @id @default(autoincrement())
  name  String   @unique(map: "uniquenes")
  valid Boolean? @default(false)
  carts carts[]
}

model cart_images {
  id      Int    @id @default(autoincrement())
  src     String
  cart_id Int
  carts   carts  @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
